<#@ template language="C#" hostspecific="True"#>
<#@ output extension=".gen.cs" #>
<#@ import namespace="System.IO" #>
<#@ include file="$(ProjectDir)\..\Project\_Include\_0_AssemplyImports.ttinclude" #>
<#@ include file="$(ProjectDir)\..\Project\_Include\_2_GlobalTTInclude.ttinclude" #>
<#@ include file="$(ProjectDir)\..\Project\_Include\_4_typeDeclaration.ttinclude" #>
<# FileInfo t4FileInfo = new FileInfo( this.Host.TemplateFile );#>
//----------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a <#=t4FileInfo.Name#>. 
//     Changes will be lost if the code is regenerated.
// </auto-generated>
//----------------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using UnityEngine;

namespace <#=globalNamespaceName#>.UHelpers;
public static partial class Conversion
{
<# 
(string fromType, string toType)[] conversions= 
    new []{
    ("Vector2", "Vec2D"),
    ("Vector3", "Vec3D"),
    };
string[][] conversionsFieldNames = new string[2][];
conversionsFieldNames[0] = new string[]{"x", "y"};
conversionsFieldNames[1] = new string[]{"x", "y", "z"};


string fromType; 
string toType;

//(string ListType, string Length)[] = new[]{("int[]", "Length"),("Span<int>", "Length"),("List<int>", "Count")}
object[] availableTypesIterators = new object[2];
availableTypesIterators[0] = new (string ListType, string Length)[]{
    ("Vector2[]", "Length"),
    ("ReadOnlySpan<Vector2>", "Length"),
    ("IReadOnlyList<Vector2>", "Count")};
availableTypesIterators[1] = new (string ListType, string Length)[]{
    ("Vector3[]", "Length"),
    ("ReadOnlySpan<Vector3>", "Length"),
    ("IReadOnlyList<Vector3>", "Count")};

for(var a = 0; a<conversions.Length; a++)
    {
    //UnfoldTypeDescription(availableTypes[a]);
    (fromType, toType) = conversions[a];
    string[] fieldNames = conversionsFieldNames[a];
    (string ListType, string Length)[] typeIterators = ((string ListType, string Length)[])availableTypesIterators[a];
#>

<#      foreach((string ListType, string Length) listlike in typeIterators) { #>

    public static <#=toType#>[] ToArrayTwiceRounded<#=toType#>(this <#=listlike.ListType#> vectors)
    {
        const double FIRSTROUND = 100000;
        const double SECONDROUND = 10000;
        <#=toType#>[] newArray = new <#=toType#>[vectors.<#=listlike.Length#>];
        for (int i = 0; i < vectors.<#=listlike.Length#>; ++i)
        {
<#          foreach (var field in fieldNames){#>
            double <#=field#> = (double)vectors[i].<#=field#>;
            <#=field#> = Math.Round(<#=field#>*FIRSTROUND)/FIRSTROUND;
            <#=field#> = Math.Round(<#=field#>*SECONDROUND)/SECONDROUND;
<#          } #>
            newArray[i] = new <#=toType#>(<#=String.Join(", ",fieldNames.Select((x)=> $"{x}"))#>);
        }
        return newArray;
    }
<#      } #>
/*

    public static <#=toType#>[] ToArrayTwiceRounded2<#=toType#>(this ReadOnlySpan<<#=fromType#>> vectors)
    {
        const double FIRSTROUND = 10000;
        const double SECONDROUND = 1000;
        <#=toType#>[] newArray = new <#=toType#>[vectors.Length];
        for (int i = 0; i < vectors.Length; ++i)
        {
<# foreach (var field in fieldNames){#>
            double <#=field#> = (((double)vectors[i].<#=field#>)*FIRSTROUND);
            <#=field#> = Math.Round(<#=field#>)/FIRSTROUND;
            <#=field#> = Math.Round(<#=field#>*SECONDROUND)/SECONDROUND;
<# } #>
            newArray[i] = new <#=toType#>(<#=String.Join(", ",fieldNames.Select((x)=> $"{x}"))#>);
        }
        return newArray;
    }
    public static <#=toType#>[] ToArrayTwiceRounded2<#=toType#>(this IReadOnlyList<<#=fromType#>> vectors)
    {
        <#=toType#>[] newArray = new <#=toType#>[vectors.Count];
        for (int i = 0; i < vectors.Count; ++i)
            newArray[i] = vectors[i].To<#=toType#>();
        return newArray;
    }
*/
<# } #>

}
