//----------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a Conversion_UnityTwiceRound_toV2V3.tt. 
//     Changes will be lost if the code is regenerated.
// </auto-generated>
//----------------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using UnityEngine;

namespace DoubleEngine.UHelpers;
public static partial class Conversion
{


    public static Vec2D[] ToArrayTwiceRoundedVec2D(this Vector2[] vectors)
    {
        const double FIRSTROUND = 100000;
        const double SECONDROUND = 10000;
        Vec2D[] newArray = new Vec2D[vectors.Length];
        for (int i = 0; i < vectors.Length; ++i)
        {
            double x = (double)vectors[i].x;
            x = Math.Round(x*FIRSTROUND)/FIRSTROUND;
            x = Math.Round(x*SECONDROUND)/SECONDROUND;
            double y = (double)vectors[i].y;
            y = Math.Round(y*FIRSTROUND)/FIRSTROUND;
            y = Math.Round(y*SECONDROUND)/SECONDROUND;
            newArray[i] = new Vec2D(x, y);
        }
        return newArray;
    }

    public static Vec2D[] ToArrayTwiceRoundedVec2D(this ReadOnlySpan<Vector2> vectors)
    {
        const double FIRSTROUND = 100000;
        const double SECONDROUND = 10000;
        Vec2D[] newArray = new Vec2D[vectors.Length];
        for (int i = 0; i < vectors.Length; ++i)
        {
            double x = (double)vectors[i].x;
            x = Math.Round(x*FIRSTROUND)/FIRSTROUND;
            x = Math.Round(x*SECONDROUND)/SECONDROUND;
            double y = (double)vectors[i].y;
            y = Math.Round(y*FIRSTROUND)/FIRSTROUND;
            y = Math.Round(y*SECONDROUND)/SECONDROUND;
            newArray[i] = new Vec2D(x, y);
        }
        return newArray;
    }

    public static Vec2D[] ToArrayTwiceRoundedVec2D(this IReadOnlyList<Vector2> vectors)
    {
        const double FIRSTROUND = 100000;
        const double SECONDROUND = 10000;
        Vec2D[] newArray = new Vec2D[vectors.Count];
        for (int i = 0; i < vectors.Count; ++i)
        {
            double x = (double)vectors[i].x;
            x = Math.Round(x*FIRSTROUND)/FIRSTROUND;
            x = Math.Round(x*SECONDROUND)/SECONDROUND;
            double y = (double)vectors[i].y;
            y = Math.Round(y*FIRSTROUND)/FIRSTROUND;
            y = Math.Round(y*SECONDROUND)/SECONDROUND;
            newArray[i] = new Vec2D(x, y);
        }
        return newArray;
    }
/*

    public static Vec2D[] ToArrayTwiceRounded2Vec2D(this ReadOnlySpan<Vector2> vectors)
    {
        const double FIRSTROUND = 10000;
        const double SECONDROUND = 1000;
        Vec2D[] newArray = new Vec2D[vectors.Length];
        for (int i = 0; i < vectors.Length; ++i)
        {
            double x = (((double)vectors[i].x)*FIRSTROUND);
            x = Math.Round(x)/FIRSTROUND;
            x = Math.Round(x*SECONDROUND)/SECONDROUND;
            double y = (((double)vectors[i].y)*FIRSTROUND);
            y = Math.Round(y)/FIRSTROUND;
            y = Math.Round(y*SECONDROUND)/SECONDROUND;
            newArray[i] = new Vec2D(x, y);
        }
        return newArray;
    }
    public static Vec2D[] ToArrayTwiceRounded2Vec2D(this IReadOnlyList<Vector2> vectors)
    {
        Vec2D[] newArray = new Vec2D[vectors.Count];
        for (int i = 0; i < vectors.Count; ++i)
            newArray[i] = vectors[i].ToVec2D();
        return newArray;
    }
*/


    public static Vec3D[] ToArrayTwiceRoundedVec3D(this Vector3[] vectors)
    {
        const double FIRSTROUND = 100000;
        const double SECONDROUND = 10000;
        Vec3D[] newArray = new Vec3D[vectors.Length];
        for (int i = 0; i < vectors.Length; ++i)
        {
            double x = (double)vectors[i].x;
            x = Math.Round(x*FIRSTROUND)/FIRSTROUND;
            x = Math.Round(x*SECONDROUND)/SECONDROUND;
            double y = (double)vectors[i].y;
            y = Math.Round(y*FIRSTROUND)/FIRSTROUND;
            y = Math.Round(y*SECONDROUND)/SECONDROUND;
            double z = (double)vectors[i].z;
            z = Math.Round(z*FIRSTROUND)/FIRSTROUND;
            z = Math.Round(z*SECONDROUND)/SECONDROUND;
            newArray[i] = new Vec3D(x, y, z);
        }
        return newArray;
    }

    public static Vec3D[] ToArrayTwiceRoundedVec3D(this ReadOnlySpan<Vector3> vectors)
    {
        const double FIRSTROUND = 100000;
        const double SECONDROUND = 10000;
        Vec3D[] newArray = new Vec3D[vectors.Length];
        for (int i = 0; i < vectors.Length; ++i)
        {
            double x = (double)vectors[i].x;
            x = Math.Round(x*FIRSTROUND)/FIRSTROUND;
            x = Math.Round(x*SECONDROUND)/SECONDROUND;
            double y = (double)vectors[i].y;
            y = Math.Round(y*FIRSTROUND)/FIRSTROUND;
            y = Math.Round(y*SECONDROUND)/SECONDROUND;
            double z = (double)vectors[i].z;
            z = Math.Round(z*FIRSTROUND)/FIRSTROUND;
            z = Math.Round(z*SECONDROUND)/SECONDROUND;
            newArray[i] = new Vec3D(x, y, z);
        }
        return newArray;
    }

    public static Vec3D[] ToArrayTwiceRoundedVec3D(this IReadOnlyList<Vector3> vectors)
    {
        const double FIRSTROUND = 100000;
        const double SECONDROUND = 10000;
        Vec3D[] newArray = new Vec3D[vectors.Count];
        for (int i = 0; i < vectors.Count; ++i)
        {
            double x = (double)vectors[i].x;
            x = Math.Round(x*FIRSTROUND)/FIRSTROUND;
            x = Math.Round(x*SECONDROUND)/SECONDROUND;
            double y = (double)vectors[i].y;
            y = Math.Round(y*FIRSTROUND)/FIRSTROUND;
            y = Math.Round(y*SECONDROUND)/SECONDROUND;
            double z = (double)vectors[i].z;
            z = Math.Round(z*FIRSTROUND)/FIRSTROUND;
            z = Math.Round(z*SECONDROUND)/SECONDROUND;
            newArray[i] = new Vec3D(x, y, z);
        }
        return newArray;
    }
/*

    public static Vec3D[] ToArrayTwiceRounded2Vec3D(this ReadOnlySpan<Vector3> vectors)
    {
        const double FIRSTROUND = 10000;
        const double SECONDROUND = 1000;
        Vec3D[] newArray = new Vec3D[vectors.Length];
        for (int i = 0; i < vectors.Length; ++i)
        {
            double x = (((double)vectors[i].x)*FIRSTROUND);
            x = Math.Round(x)/FIRSTROUND;
            x = Math.Round(x*SECONDROUND)/SECONDROUND;
            double y = (((double)vectors[i].y)*FIRSTROUND);
            y = Math.Round(y)/FIRSTROUND;
            y = Math.Round(y*SECONDROUND)/SECONDROUND;
            double z = (((double)vectors[i].z)*FIRSTROUND);
            z = Math.Round(z)/FIRSTROUND;
            z = Math.Round(z*SECONDROUND)/SECONDROUND;
            newArray[i] = new Vec3D(x, y, z);
        }
        return newArray;
    }
    public static Vec3D[] ToArrayTwiceRounded2Vec3D(this IReadOnlyList<Vector3> vectors)
    {
        Vec3D[] newArray = new Vec3D[vectors.Count];
        for (int i = 0; i < vectors.Count; ++i)
            newArray[i] = vectors[i].ToVec3D();
        return newArray;
    }
*/

}
