//----------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a Conversion_V2V3V4_Unity_ToArray.tt. 
//     Changes will be lost if the code is regenerated.
// </auto-generated>
//----------------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using UnityEngine;

namespace DoubleEngine.UHelpers;

public static partial class Conversion
{
    public static Vector2[] ToArrayVector2(this Vec2D[] vectors)
    {
        Vector2[] newArray = new Vector2[vectors.Length];
        for (int i = 0; i < vectors.Length; ++i)
            newArray[i] = vectors[i].ToVector2();
        return newArray;
    }
    public static Vector2[] ToArrayVector2(this ReadOnlySpan<Vec2D> vectors)
    {
        Vector2[] newArray = new Vector2[vectors.Length];
        for (int i = 0; i < vectors.Length; ++i)
            newArray[i] = vectors[i].ToVector2();
        return newArray;
    }
    public static Vector2[] ToArrayVector2(this IReadOnlyList<Vec2D> vectors)
    {
        Vector2[] newArray = new Vector2[vectors.Count];
        for (int i = 0; i < vectors.Count; ++i)
            newArray[i] = vectors[i].ToVector2();
        return newArray;
    }

    public static Vec2D[] ToArrayVec2D(this Vector2[] vectors)
    {
        Vec2D[] newArray = new Vec2D[vectors.Length];
        for (int i = 0; i < vectors.Length; ++i)
            newArray[i] = vectors[i].ToVec2D();
        return newArray;
    }
    public static Vec2D[] ToArrayVec2D(this ReadOnlySpan<Vector2> vectors)
    {
        Vec2D[] newArray = new Vec2D[vectors.Length];
        for (int i = 0; i < vectors.Length; ++i)
            newArray[i] = vectors[i].ToVec2D();
        return newArray;
    }
    public static Vec2D[] ToArrayVec2D(this IReadOnlyList<Vector2> vectors)
    {
        Vec2D[] newArray = new Vec2D[vectors.Count];
        for (int i = 0; i < vectors.Count; ++i)
            newArray[i] = vectors[i].ToVec2D();
        return newArray;
    }

    public static Vector3[] ToArrayVector3(this Vec3D[] vectors)
    {
        Vector3[] newArray = new Vector3[vectors.Length];
        for (int i = 0; i < vectors.Length; ++i)
            newArray[i] = vectors[i].ToVector3();
        return newArray;
    }
    public static Vector3[] ToArrayVector3(this ReadOnlySpan<Vec3D> vectors)
    {
        Vector3[] newArray = new Vector3[vectors.Length];
        for (int i = 0; i < vectors.Length; ++i)
            newArray[i] = vectors[i].ToVector3();
        return newArray;
    }
    public static Vector3[] ToArrayVector3(this IReadOnlyList<Vec3D> vectors)
    {
        Vector3[] newArray = new Vector3[vectors.Count];
        for (int i = 0; i < vectors.Count; ++i)
            newArray[i] = vectors[i].ToVector3();
        return newArray;
    }

    public static Vec3D[] ToArrayVec3D(this Vector3[] vectors)
    {
        Vec3D[] newArray = new Vec3D[vectors.Length];
        for (int i = 0; i < vectors.Length; ++i)
            newArray[i] = vectors[i].ToVec3D();
        return newArray;
    }
    public static Vec3D[] ToArrayVec3D(this ReadOnlySpan<Vector3> vectors)
    {
        Vec3D[] newArray = new Vec3D[vectors.Length];
        for (int i = 0; i < vectors.Length; ++i)
            newArray[i] = vectors[i].ToVec3D();
        return newArray;
    }
    public static Vec3D[] ToArrayVec3D(this IReadOnlyList<Vector3> vectors)
    {
        Vec3D[] newArray = new Vec3D[vectors.Count];
        for (int i = 0; i < vectors.Count; ++i)
            newArray[i] = vectors[i].ToVec3D();
        return newArray;
    }

}
