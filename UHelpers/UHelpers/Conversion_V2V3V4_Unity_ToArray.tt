<#@ template language="C#" hostspecific="True"#>
<#@ output extension=".gen.cs" #>
<#@ import namespace="System.IO" #>
<#@ include file="$(ProjectDir)\..\Project\_Include\_0_AssemplyImports.ttinclude" #>
<#@ include file="$(ProjectDir)\..\Project\_Include\_2_GlobalTTInclude.ttinclude" #>
<#@ include file="$(ProjectDir)\..\Project\_Include\_4_typeDeclaration.ttinclude" #>
<# FileInfo t4FileInfo = new FileInfo( this.Host.TemplateFile );#>
//----------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a <#=t4FileInfo.Name#>. 
//     Changes will be lost if the code is regenerated.
// </auto-generated>
//----------------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using UnityEngine;

namespace <#=globalNamespaceName#>.UHelpers;

public static partial class Conversion
{
<# 
(string fromType, string toType)[] conversions= 
    new []{
    ("Vec2D", "Vector2"),
    ("Vector2", "Vec2D"),
    ("Vec3D", "Vector3"),
    ("Vector3", "Vec3D"),
    };

string fromType; 
string toType;

for(var a = 0; a<conversions.Length; a++)
    {
    //UnfoldTypeDescription(availableTypes[a]);
    (fromType, toType) = conversions[a];
#>
    public static <#=toType#>[] ToArray<#=toType#>(this <#=fromType#>[] vectors)
    {
        <#=toType#>[] newArray = new <#=toType#>[vectors.Length];
        for (int i = 0; i < vectors.Length; ++i)
            newArray[i] = vectors[i].To<#=toType#>();
        return newArray;
    }
    public static <#=toType#>[] ToArray<#=toType#>(this ReadOnlySpan<<#=fromType#>> vectors)
    {
        <#=toType#>[] newArray = new <#=toType#>[vectors.Length];
        for (int i = 0; i < vectors.Length; ++i)
            newArray[i] = vectors[i].To<#=toType#>();
        return newArray;
    }
    public static <#=toType#>[] ToArray<#=toType#>(this IReadOnlyList<<#=fromType#>> vectors)
    {
        <#=toType#>[] newArray = new <#=toType#>[vectors.Count];
        for (int i = 0; i < vectors.Count; ++i)
            newArray[i] = vectors[i].To<#=toType#>();
        return newArray;
    }

<# } #>
}
