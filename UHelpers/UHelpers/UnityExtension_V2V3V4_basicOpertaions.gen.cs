//----------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes will be lost if the code is regenerated.
// </auto-generated>
//----------------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using UnityEngine;

namespace DoubleEngine.UHelpers
{
    public static partial class UnityExtension
    {
/////////////////////////////
//[MethodImpl(MethodImplOptions.AggressiveInlining)] 
//public static float 
//Vector4 MathF.Abs(a.x) + MathF.Abs(a.y) + MathF.Abs(a.z) + MathF.Abs(a.w)
/////////////////////////////

//
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector2 AddedVect(this Vector2 v, Vector2 vector) => new Vector2 ( v.x + vector.x, v.y + vector.y );
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector2 Multiplied(this Vector2 v, float scalar) => new Vector2 ( v.x * scalar, v.y * scalar );
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector2 MultipliedVect(this Vector2 v, Vector2 vector) => new Vector2 ( v.x * vector.x, v.y * vector.y );
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector2 DividedBy(this Vector2 v, float divider) => new Vector2 ( v.x / divider, v.y / divider );
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector2 DividedByVect(this Vector2 v, Vector2 divider) => new Vector2 ( v.x / divider.x, v.y / divider.y );
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector2 RemainderOfDivision(this Vector2 v, float divider) => new Vector2 ( v.x % divider, v.y % divider );
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector2 RemainderOfDivisionVect(this Vector2 v, Vector2 divider) => new Vector2 ( v.x % divider.x, v.y % divider.y );

//
//
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector3 AddedVect(this Vector3 v, Vector3 vector) => new Vector3 ( v.x + vector.x, v.y + vector.y, v.z + vector.z );
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector3 Multiplied(this Vector3 v, float scalar) => new Vector3 ( v.x * scalar, v.y * scalar, v.z * scalar );
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector3 MultipliedVect(this Vector3 v, Vector3 vector) => new Vector3 ( v.x * vector.x, v.y * vector.y, v.z * vector.z );
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector3 DividedBy(this Vector3 v, float divider) => new Vector3 ( v.x / divider, v.y / divider, v.z / divider );
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector3 DividedByVect(this Vector3 v, Vector3 divider) => new Vector3 ( v.x / divider.x, v.y / divider.y, v.z / divider.z );
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector3 RemainderOfDivision(this Vector3 v, float divider) => new Vector3 ( v.x % divider, v.y % divider, v.z % divider );
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector3 RemainderOfDivisionVect(this Vector3 v, Vector3 divider) => new Vector3 ( v.x % divider.x, v.y % divider.y, v.z % divider.z );

//
//
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector4 AddedVect(this Vector4 v, Vector4 vector) => new Vector4 ( v.x + vector.x, v.y + vector.y, v.z + vector.z, v.w + vector.w );
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector4 Multiplied(this Vector4 v, float scalar) => new Vector4 ( v.x * scalar, v.y * scalar, v.z * scalar, v.w * scalar );
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector4 MultipliedVect(this Vector4 v, Vector4 vector) => new Vector4 ( v.x * vector.x, v.y * vector.y, v.z * vector.z, v.w * vector.w );
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector4 DividedBy(this Vector4 v, float divider) => new Vector4 ( v.x / divider, v.y / divider, v.z / divider, v.w / divider );
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector4 DividedByVect(this Vector4 v, Vector4 divider) => new Vector4 ( v.x / divider.x, v.y / divider.y, v.z / divider.z, v.w / divider.w );
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector4 RemainderOfDivision(this Vector4 v, float divider) => new Vector4 ( v.x % divider, v.y % divider, v.z % divider, v.w % divider );
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector4 RemainderOfDivisionVect(this Vector4 v, Vector4 divider) => new Vector4 ( v.x % divider.x, v.y % divider.y, v.z % divider.z, v.w % divider.w );

//
    }
}
