<#@ template language="C#" hostspecific="True"#>
<#@ output extension=".gen.cs" #>
<#@ import namespace="System.IO" #>
<#@ include file="$(ProjectDir)\..\Project\_Include\_0_AssemplyImports.ttinclude" #>
<#@ include file="$(ProjectDir)\..\Project\_Include\_2_GlobalTTInclude.ttinclude" #>
<#@ include file="$(ProjectDir)\..\Project\_Include\_4_typeDeclaration.ttinclude" #>
<#@ include file="$(ProjectDir)\..\Project\_Include\_6_Vector2Unity_typeInitialization.ttinclude" #>
<#@ include file="$(ProjectDir)\..\Project\_Include\_6_Vector3Unity_typeInitialization.ttinclude" #>
<#@ include file="$(ProjectDir)\..\Project\_Include\_6_Vector4Unity_typeInitialization.ttinclude" #>
<#@ include file="$(ProjectDir)\..\Project\_Include\_6_QuaternionUnity_typeInitialization.ttinclude" #>
<#@ include file="$(ProjectDir)\..\Project\_Include\_6_Vec2I_typeInitialization.ttinclude" #>
<#@ include file="$(ProjectDir)\..\Project\_Include\_6_Vec3I_typeInitialization.ttinclude" #>
<# FileInfo t4FileInfo = new FileInfo( this.Host.TemplateFile );#>
//----------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a <#=t4FileInfo.Name#>. 
//     Changes will be lost if the code is regenerated.
// </auto-generated>
//----------------------------------------------------------------------------------------

using UnityEngine;

namespace <#=globalNamespaceName#>.UHelpers;

public static partial class Conversion
{
<# 
Dictionary<string,(string t, string cast, string backCast)> convert = new Dictionary<string,(string t, string cast, string backCast)>();
convert["Vector2"] = ("Vec2D", "", "(float)");
convert["Vector3"] = ("Vec3D", "", "(float)");
convert["Vector4"] = ("Vec4D", "", "(float)");
convert["Quaternion"] = ("QuaternionD", "", "(float)");
convert["Vec2I"] = ("Vector2Int", "", "");
convert["Vec3I"] = ("Vector3Int", "", "");
for(var a = 0; a<availableTypes.Count; a++)
    {
    UnfoldTypeDescription(availableTypes[a]);
    string cast = convert[typeName].cast;
    string backCast = convert[typeName].backCast;
#>
    <#=publicStatic#> <#=convert[typeName].t#> To<#=convert[typeName].t#>(this <#=typeName#> from) => 
        new <#=convert[typeName].t#>( <#=String.Join(", ",fieldNames.Select(x=> $"{cast}from.{x}"))#> );
    <#=publicStatic#> <#=typeName#> To<#=typeName#>(this <#=convert[typeName].t#> from) => 
        new <#=typeName#>( <#=String.Join(", ",fieldNames.Select(x=> $"{backCast}from.{x}"))#> );

<# } #>
}
