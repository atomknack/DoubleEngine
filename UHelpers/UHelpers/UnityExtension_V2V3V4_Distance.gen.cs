//----------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes will be lost if the code is regenerated.
// </auto-generated>
//----------------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using UnityEngine;

namespace DoubleEngine.UHelpers
{
    public static partial class UnityExtension
    {
/////////////////////////////
//[MethodImpl(MethodImplOptions.AggressiveInlining)] 
//public static float 
//Vector4 MathF.Abs(a.x) + MathF.Abs(a.y) + MathF.Abs(a.z) + MathF.Abs(a.w)
/////////////////////////////

        [MethodImpl(MethodImplOptions.AggressiveInlining)] 
        public static float MagnitudeManhattan(this Vector2 a) => MathF.Abs(a.x) + MathF.Abs(a.y);
        [MethodImpl(MethodImplOptions.AggressiveInlining)] 
        public static float MagnitudeSqr(this Vector2 a) => a.sqrMagnitude;
        [MethodImpl(MethodImplOptions.AggressiveInlining)] 
        public static float Magnitude(this Vector2 a) => a.magnitude;


        [MethodImpl(MethodImplOptions.AggressiveInlining)] 
        public static float DistanceSqr(this Vector2 a, Vector2 b) => (a - b).MagnitudeSqr();
        [MethodImpl(MethodImplOptions.AggressiveInlining)] 
        public static float Distance(this Vector2 a, Vector2 b) => (a - b).Magnitude();
        [MethodImpl(MethodImplOptions.AggressiveInlining)] 
        public static float DistanceManhattan(this Vector2 a, Vector2 b) => (a - b).MagnitudeManhattan();
        [MethodImpl(MethodImplOptions.AggressiveInlining)] 
        public static bool CloseByEach(this Vector2 a, Vector2 b, float epsilon = 1E-5f ) =>
            MathF.Abs(a.x - b.x) < epsilon && MathF.Abs(a.y - b.y) < epsilon;
        [MethodImpl(MethodImplOptions.AggressiveInlining)] 
        public static bool CloseBySqrDistance(this Vector2 a, Vector2 b, float sqrEpsilon = 1E-9f ) => DistanceSqr(a, b) <= sqrEpsilon;
        [MethodImpl(MethodImplOptions.AggressiveInlining)] 
        public static bool CloseByDistance(this Vector2 a, Vector2 b, float epsilon = 1E-5f ) => Distance(a, b) <= epsilon;
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool CloseByManhattan(this Vector2 a, Vector2 b, float epsilon = 1E-5f )
        {
            float d = MathF.Abs(a.x - b.x);
            if (d > epsilon)
                return false;
            d += MathF.Abs(a.y - b.y);
            if (d > epsilon)
                return false;
            return true;
        }


        [MethodImpl(MethodImplOptions.AggressiveInlining)] 
        public static float MagnitudeManhattan(this Vector3 a) => MathF.Abs(a.x) + MathF.Abs(a.y) + MathF.Abs(a.z);
        [MethodImpl(MethodImplOptions.AggressiveInlining)] 
        public static float MagnitudeSqr(this Vector3 a) => a.sqrMagnitude;
        [MethodImpl(MethodImplOptions.AggressiveInlining)] 
        public static float Magnitude(this Vector3 a) => a.magnitude;


        [MethodImpl(MethodImplOptions.AggressiveInlining)] 
        public static float DistanceSqr(this Vector3 a, Vector3 b) => (a - b).MagnitudeSqr();
        [MethodImpl(MethodImplOptions.AggressiveInlining)] 
        public static float Distance(this Vector3 a, Vector3 b) => (a - b).Magnitude();
        [MethodImpl(MethodImplOptions.AggressiveInlining)] 
        public static float DistanceManhattan(this Vector3 a, Vector3 b) => (a - b).MagnitudeManhattan();
        [MethodImpl(MethodImplOptions.AggressiveInlining)] 
        public static bool CloseByEach(this Vector3 a, Vector3 b, float epsilon = 1E-5f ) =>
            MathF.Abs(a.x - b.x) < epsilon && MathF.Abs(a.y - b.y) < epsilon && MathF.Abs(a.z - b.z) < epsilon;
        [MethodImpl(MethodImplOptions.AggressiveInlining)] 
        public static bool CloseBySqrDistance(this Vector3 a, Vector3 b, float sqrEpsilon = 1E-9f ) => DistanceSqr(a, b) <= sqrEpsilon;
        [MethodImpl(MethodImplOptions.AggressiveInlining)] 
        public static bool CloseByDistance(this Vector3 a, Vector3 b, float epsilon = 1E-5f ) => Distance(a, b) <= epsilon;
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool CloseByManhattan(this Vector3 a, Vector3 b, float epsilon = 1E-5f )
        {
            float d = MathF.Abs(a.x - b.x);
            if (d > epsilon)
                return false;
            d += MathF.Abs(a.y - b.y);
            if (d > epsilon)
                return false;
            d += MathF.Abs(a.z - b.z);
            if (d > epsilon)
                return false;
            return true;
        }


        [MethodImpl(MethodImplOptions.AggressiveInlining)] 
        public static float MagnitudeManhattan(this Vector4 a) => MathF.Abs(a.x) + MathF.Abs(a.y) + MathF.Abs(a.z) + MathF.Abs(a.w);
        [MethodImpl(MethodImplOptions.AggressiveInlining)] 
        public static float MagnitudeSqr(this Vector4 a) => a.sqrMagnitude;
        [MethodImpl(MethodImplOptions.AggressiveInlining)] 
        public static float Magnitude(this Vector4 a) => a.magnitude;


        [MethodImpl(MethodImplOptions.AggressiveInlining)] 
        public static float DistanceSqr(this Vector4 a, Vector4 b) => (a - b).MagnitudeSqr();
        [MethodImpl(MethodImplOptions.AggressiveInlining)] 
        public static float Distance(this Vector4 a, Vector4 b) => (a - b).Magnitude();
        [MethodImpl(MethodImplOptions.AggressiveInlining)] 
        public static float DistanceManhattan(this Vector4 a, Vector4 b) => (a - b).MagnitudeManhattan();
        [MethodImpl(MethodImplOptions.AggressiveInlining)] 
        public static bool CloseByEach(this Vector4 a, Vector4 b, float epsilon = 1E-5f ) =>
            MathF.Abs(a.x - b.x) < epsilon && MathF.Abs(a.y - b.y) < epsilon && MathF.Abs(a.z - b.z) < epsilon && MathF.Abs(a.w - b.w) < epsilon;
        [MethodImpl(MethodImplOptions.AggressiveInlining)] 
        public static bool CloseBySqrDistance(this Vector4 a, Vector4 b, float sqrEpsilon = 1E-9f ) => DistanceSqr(a, b) <= sqrEpsilon;
        [MethodImpl(MethodImplOptions.AggressiveInlining)] 
        public static bool CloseByDistance(this Vector4 a, Vector4 b, float epsilon = 1E-5f ) => Distance(a, b) <= epsilon;
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool CloseByManhattan(this Vector4 a, Vector4 b, float epsilon = 1E-5f )
        {
            float d = MathF.Abs(a.x - b.x);
            if (d > epsilon)
                return false;
            d += MathF.Abs(a.y - b.y);
            if (d > epsilon)
                return false;
            d += MathF.Abs(a.z - b.z);
            if (d > epsilon)
                return false;
            d += MathF.Abs(a.w - b.w);
            if (d > epsilon)
                return false;
            return true;
        }


    }
}
