<#@ template language="C#" hostspecific="True"#>
<#@ assembly name="System" #>
<#@ assembly name="System.Core" #>

<#@ import namespace="System.IO" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>

<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".gen.cs" #>

<#@ include file="$(ProjectDir)\_1_ManagerMultipleOutputHelper.ttinclude"#>

<# FileInfo t4FileInfo = new FileInfo( this.Host.TemplateFile );
   var filenameWithoutExtension = t4FileInfo.Name.Split('.')[0]; #>
//// this file was generated as byproduct of generating *.gen.cs files from master template: <#=t4FileInfo.Name#>

<# var manager = Manager.Create(Host, GenerationEnvironment); #>
<# 
var availableTypes = new string[] {"AtomEvent", "AtomEventWithStoredValue"};
for(var i = 0; i<availableTypes.Length; i++)
    {
    var typeName = availableTypes[i];
    string filename = $"{filenameWithoutExtension}_{typeName}.gen.cs";
    WriteLine($"//// Generating: {filename}");
    manager.StartNewFile(filename); #>
//----------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a <#=t4FileInfo.Name#>
//     Changes will be lost if the code is regenerated.
// </auto-generated>
//----------------------------------------------------------------------------------------

using DoubleEngine.AtomEvents;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DoubleEngine_xUnit
{
    public partial class EventWithParameter
    {
        [Fact]
        public void TestParemeter_<#=typeName#>()
        {
            testValue = 10;
            <#=typeName#><int> eventInt = new();
            eventInt.Subscribe(Inc_TestValue);
            eventInt.Publish(5);
            Assert.Equal(15, testValue);
        }
    }
}
<#  manager.EndBlock();
    } #>
<# manager.Process(true); #>