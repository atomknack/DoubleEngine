<#@ template language="C#" hostspecific="True"#>
<#@ assembly name="System" #>
<#@ assembly name="System.Core" #>

<#@ import namespace="System.IO" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>

<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".gen.cs" #>

<#@ include file="$(ProjectDir)\_1_ManagerMultipleOutputHelper.ttinclude"#>

<# FileInfo t4FileInfo = new FileInfo( this.Host.TemplateFile );
   var filenameWithoutExtension = t4FileInfo.Name.Split('.')[0]; #>
//// this file was generated as byproduct of generating *.gen.cs files from master template: <#=t4FileInfo.Name#>

<# var manager = Manager.Create(Host, GenerationEnvironment); #>
<# 
var availableTypes = new (string typeName, string nameWithParameter, string subscriberName, string subscriberArgument)[3];// {"AtomEvent", "AtomEventWithLastValue"};
availableTypes[0] = ("AtomEvent", "AtomEvent", "Subscriber", "");
availableTypes[1] = ("AtomEvent", "AtomEvent<int>", "Subscriber_int", "99");
availableTypes[2] = ("AtomEventWithStoredValue", "AtomEventWithStoredValue<int>", "Subscriber_int", "99");
for(var i = 0; i<availableTypes.Length; i++)
    {
    string typeName = availableTypes[i].typeName;
    string nameWithParameter = availableTypes[i].nameWithParameter;
    string subscriberName = availableTypes[i].subscriberName;
    string subscriberArgument = availableTypes[i].subscriberArgument;
    string nameWithParameterSymbolsReplaced = nameWithParameter.Replace('<','_').Replace(">",string.Empty);
    string filename = $"{filenameWithoutExtension}_{nameWithParameterSymbolsReplaced}.gen.cs";
    WriteLine($"//// Generating: {filename}");
    manager.StartNewFile(filename); #>
using DoubleEngine.AtomEvents;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DoubleEngine_xUnit.Events
{
    public partial class EventSubscribedAndPublished
    {
        [Fact]
        public void SubscribedPublishedAndCalled_<#=nameWithParameterSymbolsReplaced#>()
        {
            eventSubscriberWasCalledCounter = 0;
            <#=nameWithParameter#> ev = new();
            ev.Subscribe(<#=subscriberName#>);
            Assert.Equal(0, eventSubscriberWasCalledCounter);
            ev.Publish(<#=subscriberArgument#>);
            Assert.Equal(1, eventSubscriberWasCalledCounter);
            ev.UnSubscribe(<#=subscriberName#>);
            Assert.Equal(1, eventSubscriberWasCalledCounter);
            ev.Publish(<#=subscriberArgument#>);
            Assert.Equal(1, eventSubscriberWasCalledCounter);
        }
    }
}
<#  manager.EndBlock();
    } #>
<# manager.Process(true); #>