<#/*THIS IS A T4 FILE*/#>
<#@ template language="C#" #>
<#@ output extension=".gen.cs" #>
//     This code was generated by a tool. Changes will be lost if the code is regenerated.

using DoubleEngine;
using FluentAssertions;
using DoubleEngine_xUnit.Helpers;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using DjvuNet.Tests.Xunit;
using CollectionLike.Comparers;
using CollectionLike.Comparers.SetsWithCustomComparer;

namespace DoubleEngine_xUnit.CollectionLike.Comparers
{
    public class Comparers_Test
    {
        static Vec3D[] vectors3D = new[] {  new Vec3D(0, 0, 0), new Vec3D(8, 9, 100), new Vec3D(80, -9, -100) };
        public static IEnumerable<object[]> Vectors3Dtestcases => vectors3D.WrapAs1Parameter();
<# 
string baseTypeName = "Vec3D";
(string name, string newSmaller, string newBigger)[] testTypes = new[]
    {
    ("x", "new Vec3D(smaller, 0, 0)", "new Vec3D(bigger, 0, 0)"),
    ("y", "new Vec3D(0, smaller, 0)", "new Vec3D(0, bigger, 0)"),
    ("z", "new Vec3D(0, 0, smaller)", "new Vec3D(0, 0, bigger)"),
    ("xyz", "new Vec3D(smaller, smaller, smaller)", "new Vec3D(bigger, bigger, bigger)"),
    };
(string name, string epsilonValue)[] comparers = new[]
    {
    ("Vec3DComparer_2em5", "0.00002"),
    ("Vec3DComparer_2em7", "0.0000002"), 
    };

for (var b = 0; b<comparers.Length; ++b)
    {
        var comparer = comparers[b];
for (var a = 0; a<testTypes.Length; ++a)
    {
        var tt = testTypes[a];
#>

        [DjvuTheory]
        [MemberData(nameof(Vectors3Dtestcases))]
        public void <#=comparer.name#>_Test_<#=tt.name#>(<#=baseTypeName#> vec)
        {
            double epsilon = <#=comparer.name#>.EPSILON;
            epsilon.Should().Be(<#=comparer.epsilonValue#>);
            IEqualityComparer<<#=baseTypeName#>> comparer = new <#=comparer.name#>();
            double smaller = epsilon * 0.99;
            double bigger = epsilon * 1.01;

            <#=baseTypeName#> close = vec + <#=tt.newSmaller#>;
            comparer.GetHashCode(vec).Should().Be(comparer.GetHashCode(close));
            comparer.Equals(vec, close).Should().BeTrue($"{epsilon} {smaller} {vec} {close}");
            <#=baseTypeName#> tooFar = vec + <#=tt.newBigger#>;
            comparer.Equals(vec, tooFar).Should().BeFalse($"{epsilon:F8} {bigger:F8} {vec:F7} {tooFar:F7}");
            //comparer.GetHashCode(vec).Should().NotBe(comparer.GetHashCode(close));
        }
<# } #>
<# } #>
        static Vec2D[] vectors2D = new[] {  new Vec2D(0, 0), new Vec2D(8, 9), new Vec2D(80, -9) };
        public static IEnumerable<object[]> Vectors2Dtestcases => vectors2D.WrapAs1Parameter();
<# 
baseTypeName = "Vec2D";
testTypes = new[]
    {
    ("x", "new Vec2D(smaller, 0)", "new Vec2D(bigger, 0)"),
    ("y", "new Vec2D(0, smaller)", "new Vec2D(0, bigger)"),
    ("xy", "new Vec2D(smaller, smaller)", "new Vec2D(bigger, bigger)"),
    };
comparers = new[]
    {
    ("Vec2DComparer_2em5", "0.00002"),
    };

for (var b = 0; b<comparers.Length; ++b)
    {
        var comparer = comparers[b];
for (var a = 0; a<testTypes.Length; ++a)
    {
        var tt = testTypes[a];
#>

        [DjvuTheory]
        [MemberData(nameof(Vectors2Dtestcases))]
        public void <#=comparer.name#>_Test_<#=tt.name#>(<#=baseTypeName#> vec)
        {
            double epsilon = <#=comparer.name#>.EPSILON;
            epsilon.Should().Be(<#=comparer.epsilonValue#>);
            IEqualityComparer<<#=baseTypeName#>> comparer = new <#=comparer.name#>();
            double smaller = epsilon * 0.99;
            double bigger = epsilon * 1.01;

            <#=baseTypeName#> close = vec + <#=tt.newSmaller#>;
            comparer.GetHashCode(vec).Should().Be(comparer.GetHashCode(close));
            comparer.Equals(vec, close).Should().BeTrue($"{epsilon} {smaller} {vec} {close}");
            <#=baseTypeName#> tooFar = vec + <#=tt.newBigger#>;
            comparer.Equals(vec, tooFar).Should().BeFalse($"{epsilon:F8} {bigger:F8} {vec:F7} {tooFar:F7}");
            //comparer.GetHashCode(vec).Should().NotBe(comparer.GetHashCode(close));
        }
<# } #>
<# } #>
    }
}
