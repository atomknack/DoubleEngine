//     This code was generated by a tool. Changes will be lost if the code is regenerated.

using DjvuNet.Tests.Xunit;
using DoubleEngine_xUnit.Helpers;
using FluentAssertions;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Collections.Pooled;
using CollectionLike;
using CollectionLike.Pooled;

namespace DoubleEngine_xUnit.CollectionLike.ExtensionsTests
{
    public class Fill_Tests
    {
        static int[] numOfElements = new[] { 0, 8, 1, 18, 2, 28, 9, 38, 99, 48, 113, 58, 260, 68 };
        public static IEnumerable<object[]> NumOfElements => numOfElements.WrapAs2Parameter();

        [DjvuTheory]
        [MemberData(nameof(NumOfElements))]
        public static void Fill_SpanInt_Test(int count, int fillValue)
        {
            Span<int> elements = new int[count];
            elements.Fill(fillValue);
            elements.Length.Should().Be(count);
            for(int i = 0; i < count; ++i)
            {
                elements[i].Should().Be(fillValue);
            }
        }

        [DjvuTheory]
        [MemberData(nameof(NumOfElements))]
        public static void FillAsRange_SpanInt_Test(int count, int fillValue)
        {
            Span<int> elements = new int[count];
            elements.FillAsRange();
            elements.Length.Should().Be(count);
            for(int i = 0; i < count; ++i)
            {
                elements[i].Should().Be(i);
            }

            elements.FillAsRange(fillValue);
            elements.Length.Should().Be(count);
            for(int i = 0; i < count; ++i)
            {
                elements[i].Should().Be(i+fillValue);
            }
        }
        [DjvuTheory]
        [MemberData(nameof(NumOfElements))]
        public static void Fill_ArrayInt_Test(int count, int fillValue)
        {
            int[] elements = new int[count];
            elements.Fill(fillValue);
            elements.Length.Should().Be(count);
            for(int i = 0; i < count; ++i)
            {
                elements[i].Should().Be(fillValue);
            }
        }

        [DjvuTheory]
        [MemberData(nameof(NumOfElements))]
        public static void FillAsRange_ArrayInt_Test(int count, int fillValue)
        {
            int[] elements = new int[count];
            elements.FillAsRange();
            elements.Length.Should().Be(count);
            for(int i = 0; i < count; ++i)
            {
                elements[i].Should().Be(i);
            }

            elements.FillAsRange(fillValue);
            elements.Length.Should().Be(count);
            for(int i = 0; i < count; ++i)
            {
                elements[i].Should().Be(i+fillValue);
            }
        }
        [DjvuTheory]
        [MemberData(nameof(NumOfElements))]
        public static void Fill_PooledArrayStructInt_Test(int count, int fillValue)
        {
            PooledArrayStruct<int> elements = new PooledArrayStruct<int>(count);
            elements.Fill(fillValue);
            elements.Count.Should().Be(count);
            for(int i = 0; i < count; ++i)
            {
                elements[i].Should().Be(fillValue);
            }
        }

        [DjvuTheory]
        [MemberData(nameof(NumOfElements))]
        public static void FillAsRange_PooledArrayStructInt_Test(int count, int fillValue)
        {
            PooledArrayStruct<int> elements = new PooledArrayStruct<int>(count);
            elements.FillAsRange();
            elements.Count.Should().Be(count);
            for(int i = 0; i < count; ++i)
            {
                elements[i].Should().Be(i);
            }

            elements.FillAsRange(fillValue);
            elements.Count.Should().Be(count);
            for(int i = 0; i < count; ++i)
            {
                elements[i].Should().Be(i+fillValue);
            }
        }
    }
}
