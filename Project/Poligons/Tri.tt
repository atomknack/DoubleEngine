<#@ template language="C#" hostspecific="True"#>
<#@ output extension=".gen.cs" #>
<#@ include file="$(ProjectDir)\_Include\_0_AssemplyImports.ttinclude" #>

<#@ import namespace="System.IO" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>

<#@ include file="$(ProjectDir)\_Include\_1_ManagerMultipleOutputHelper.ttinclude"#>
<#@ include file="$(ProjectDir)\_Include\_2_GlobalTTInclude.ttinclude" #>
<#@ include file="$(ProjectDir)\_Include\_4_typeDeclaration.ttinclude" #>

<#@ include file="$(ProjectDir)\_Include\_6_Vec2D_typeInitialization.ttinclude" #>
<#@ include file="$(ProjectDir)\_Include\_6_Vec3D_typeInitialization.ttinclude" #>
<# FileInfo t4FileInfo = new FileInfo( this.Host.TemplateFile );#>
//// this file was generated as byproduct of generating *.gen.cs files from master template: <#=t4FileInfo.Name#>

<# var manager = Manager.Create(Host, GenerationEnvironment); #>
<# 
for(var k = 0; k<availableTypes.Count; k++)
    {
    UnfoldTypeDescription(availableTypes[k]);
    string filename = $"Tri{typeName}.gen.cs";
    WriteLine($"//// Generating: {filename}");
    manager.StartNewFile(filename); #>
//----------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a <#=t4FileInfo.Name#>
//     Changes will be lost if the code is regenerated.
// </auto-generated>
//----------------------------------------------------------------------------------------
using System;
using System.Collections;
using System.Collections.Generic;

namespace <#=globalNamespaceName#>
{
    public readonly partial struct Tri<#=typeName#>
    {        
        public readonly <#=typeName#> v0;
        public readonly <#=typeName#> v1;
        public readonly <#=typeName#> v2;

        public Tri<#=typeName#>(<#=typeName#> v0, <#=typeName#> v1, <#=typeName#> v2)
        {
            this.v0 = v0;
            this.v1 = v1;
            this.v2 = v2;
        }
        public Tri<#=typeName#>(ReadOnlySpan<<#=typeName#>> vertices, IndexedTri iTri)
        {
            this.v0 = vertices[iTri.v0];
            this.v1 = vertices[iTri.v1];
            this.v2 = vertices[iTri.v2];
        }

        public void Deconstruct(out <#=typeName#> v0, out <#=typeName#> v1, out <#=typeName#> v2)
        {
            v0 = this.v0;
            v1 = this.v1;
            v2 = this.v2;
        }
        public override string ToString()
        {
            return $"{v0}, {v1}, {v2}";
        }

        public readonly bool VerticesEqual_Manhattan(Tri<#=typeName#> other, double epsilon = 0.000001d) //TODO: need testing
        {
            if( (v0.DistanceManhattan(other.v0) <= epsilon) && (v1.DistanceManhattan(other.v1) <= epsilon) && (v2.DistanceManhattan(other.v2) <= epsilon) )
                return true;
            return false;
        }
        public readonly Tri<#=typeName#> ShiftOnce() => new Tri<#=typeName#>(v1, v2, v0); //TODO: need testing
        public readonly Tri<#=typeName#> ShiftTwice() => new Tri<#=typeName#>(v2, v0, v1); //TODO: need testing

        public static <#=b.type#> DotBetweenSides(<#=typeName#> sideAvector, <#=typeName#> center, <#=typeName#> sideBvector)=>
            <#=typeName#>.Dot((sideAvector-center).Normalized(), (sideBvector-center).Normalized());

        /*
        private const double THIRD = 1d / 3d;
        public static (<#=typeName#> center, <#=b.type#> maxDistanceSqr) CalcSqrSphere(<#=typeName#> v0, <#=typeName#> v1, <#=typeName#> v2)
        {
            var center = (v0+v1+v2)*THIRD;
            var maxDistanceSqr = MathU.Max(center.DistanceSqr(v0), center.DistanceSqr(v1));
            maxDistanceSqr = MathU.Max(maxDistanceSqr, center.DistanceSqr(v2));
            return (center, maxDistanceSqr);
        }
        */
    }

}

<#  manager.EndBlock();
    } #>
<# manager.Process(true); #>