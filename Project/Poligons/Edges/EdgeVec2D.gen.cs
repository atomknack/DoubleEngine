//----------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a Edge.tt
//     Changes will be lost if the code is regenerated.
// </auto-generated>
//----------------------------------------------------------------------------------------

using System;

namespace DoubleEngine
{
    public readonly partial struct EdgeVec2D
    {
        public readonly Vec2D start;
        public readonly Vec2D end;

		public readonly Vec2D segmentVector;
		public readonly double segmentSqrMagnitude;

		public readonly override string ToString() => $"EdgeVec2D({start.ToString()}, {end.ToString()})";

        public EdgeVec2D(Vec2D start, Vec2D end)
        {
            this.start = start;
            this.end = end;
			segmentVector = end - start;
			segmentSqrMagnitude = segmentVector.MagnitudeSqr();
			if (segmentSqrMagnitude < 1E-09d)
				throw new ArgumentException("Line segment should not be a point");
		}

		public static bool SameDirection(in EdgeVec2D a, in EdgeVec2D b) => Vec2D.Dot(a.segmentVector, b.segmentVector)>0;

		public readonly bool PointBelongsToEdge(Vec2D point) //Need testing
		{
			double projectionPosition = PositionOnEdge(point);
			if (projectionPosition < -0.0000001d || projectionPosition > 1.0000001d)
				return false; //Point is outside of line segment, it may or may not belong to some other part of line
			Vec2D projectedPoint = GetPoint(projectionPosition);
			if (point.DistanceSqr(projectedPoint) >= 1E-07d)
				return false; //Point is not belongs to any part of line
			return true;
		}
		[Obsolete("Epsilons too low, need adjusting")]
		public static bool PointBelongsToEdge(Vec2D lineStart, Vec2D lineEnd, Vec2D point) //Need testing
		{
			Vec2D lineVector = lineEnd - lineStart;
			Vec2D pointInLineStartCoords = point - lineStart;
			double projectionPosition = Vec2D.Dot(pointInLineStartCoords, lineVector) / lineVector.MagnitudeSqr();
			if (projectionPosition < -0.0000001d || projectionPosition > 1.0000001d)
				return false; //Point is outside of line segment, it may or may not belong to some other part of line
			Vec2D projectedPoint = lineStart + (lineVector * projectionPosition);
			if (point.DistanceSqr(projectedPoint) >= 1E-07d)
				return false; //Point is not belongs to any part of line
			return true;
		}
		public readonly Vec2D ProjectPointOnEdge(Vec2D Point) =>
			GetPoint( PositionOnEdge(Point) );
		public static Vec2D ProjectPointOnEdge(Vec2D lineStart, Vec2D lineEnd, Vec2D point) //Need testing
		{
			Vec2D lineVector = lineEnd - lineStart;
			Vec2D pointInLineStartCoords = point - lineStart;
			double projectionPosition = Vec2D.Dot(pointInLineStartCoords, lineVector) / lineVector.MagnitudeSqr();
			return lineStart + (lineVector * projectionPosition);
		}

		public readonly Vec2D GetPoint(double position) =>
			start + (segmentVector * position);
		public static Vec2D GetPoint(Vec2D edgeStart, Vec2D edgeEnd, double position) =>
			edgeStart + ((edgeEnd - edgeStart) * position);
		public readonly double PositionOnEdge(Vec2D Point) =>
			Vec2D.Dot(Point - start, segmentVector) / segmentSqrMagnitude;

	}
}
//
