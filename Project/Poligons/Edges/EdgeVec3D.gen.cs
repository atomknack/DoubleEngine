//----------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a Edge.tt
//     Changes will be lost if the code is regenerated.
// </auto-generated>
//----------------------------------------------------------------------------------------

using System;

namespace DoubleEngine
{
    public readonly partial struct EdgeVec3D
    {
        public readonly Vec3D start;
        public readonly Vec3D end;

		public readonly Vec3D segmentVector;
		public readonly double segmentSqrMagnitude;

		public readonly override string ToString() => $"EdgeVec3D({start.ToString()}, {end.ToString()})";

        public EdgeVec3D(Vec3D start, Vec3D end)
        {
            this.start = start;
            this.end = end;
			segmentVector = end - start;
			segmentSqrMagnitude = segmentVector.MagnitudeSqr();
			if (segmentSqrMagnitude < 1E-09d)
				throw new ArgumentException("Line segment should not be a point");
		}

		public static bool SameDirection(in EdgeVec3D a, in EdgeVec3D b) => Vec3D.Dot(a.segmentVector, b.segmentVector)>0;

		public readonly bool PointBelongsToEdge(Vec3D point) //Need testing
		{
			double projectionPosition = PositionOnEdge(point);
			if (projectionPosition < -0.0000001d || projectionPosition > 1.0000001d)
				return false; //Point is outside of line segment, it may or may not belong to some other part of line
			Vec3D projectedPoint = GetPoint(projectionPosition);
			if (point.DistanceSqr(projectedPoint) >= 1E-07d)
				return false; //Point is not belongs to any part of line
			return true;
		}
		[Obsolete("Epsilons too low, need adjusting")]
		public static bool PointBelongsToEdge(Vec3D lineStart, Vec3D lineEnd, Vec3D point) //Need testing
		{
			Vec3D lineVector = lineEnd - lineStart;
			Vec3D pointInLineStartCoords = point - lineStart;
			double projectionPosition = Vec3D.Dot(pointInLineStartCoords, lineVector) / lineVector.MagnitudeSqr();
			if (projectionPosition < -0.0000001d || projectionPosition > 1.0000001d)
				return false; //Point is outside of line segment, it may or may not belong to some other part of line
			Vec3D projectedPoint = lineStart + (lineVector * projectionPosition);
			if (point.DistanceSqr(projectedPoint) >= 1E-07d)
				return false; //Point is not belongs to any part of line
			return true;
		}
		public readonly Vec3D ProjectPointOnEdge(Vec3D Point) =>
			GetPoint( PositionOnEdge(Point) );
		public static Vec3D ProjectPointOnEdge(Vec3D lineStart, Vec3D lineEnd, Vec3D point) //Need testing
		{
			Vec3D lineVector = lineEnd - lineStart;
			Vec3D pointInLineStartCoords = point - lineStart;
			double projectionPosition = Vec3D.Dot(pointInLineStartCoords, lineVector) / lineVector.MagnitudeSqr();
			return lineStart + (lineVector * projectionPosition);
		}

		public readonly Vec3D GetPoint(double position) =>
			start + (segmentVector * position);
		public static Vec3D GetPoint(Vec3D edgeStart, Vec3D edgeEnd, double position) =>
			edgeStart + ((edgeEnd - edgeStart) * position);
		public readonly double PositionOnEdge(Vec3D Point) =>
			Vec3D.Dot(Point - start, segmentVector) / segmentSqrMagnitude;

	}
}
//
