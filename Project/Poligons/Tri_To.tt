<#@ template language="C#" hostspecific="True"#>
<#@ output extension=".gen.cs" #>
<#@ include file="$(ProjectDir)\_Include\_0_AssemplyImports.ttinclude" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ include file="$(ProjectDir)\_Include\_1_ManagerMultipleOutputHelper.ttinclude"#>
<#@ include file="$(ProjectDir)\_Include\_2_GlobalTTInclude.ttinclude" #>
<#@ include file="$(ProjectDir)\_Include\_4_typeDeclaration.ttinclude" #>

<#@ include file="$(ProjectDir)\_Include\_6_Vec2D_typeInitialization.ttinclude" #>
<# // include file="$(ProjectDir)\_Include\_6_Vector2Unity_typeInitialization.ttinclude" #>
<# FileInfo t4FileInfo = new FileInfo( this.Host.TemplateFile );#>
//----------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a <#=t4FileInfo.Name#>
//     Changes will be lost if the code is regenerated.
// </auto-generated>
//----------------------------------------------------------------------------------------

using System.Collections;
using System.Collections.Generic;

namespace <#=globalNamespaceName#>
{
    public static partial class TrigonHelpers
    {

<# var manager = Manager.Create(Host, GenerationEnvironment); #>
<# 

Dictionary<string,string> convDict = new Dictionary<string,string>();
convDict["Vec2D"] = "Vec3D";
//convDict["Vector2"] = "Vector3";

Dictionary<string,string> convUnity = new Dictionary<string,string>();
convUnity["Vec2D"] = "Vector2";
//convUnity["Vector2"] = "Vec2D";

for(var k = 0; k<availableTypes.Count; k++)
    {
    UnfoldTypeDescription(availableTypes[k]);
#>

        public static Tri<#=typeName#> ToTri<#=typeName#>(this Tri<#=convDict[typeName]#> face) =>
            new Tri<#=typeName#>( face.v0.ConvertXYZtoXY(), face.v1.ConvertXYZtoXY(), face.v2.ConvertXYZtoXY() );
        public static Tri<#=typeName#> ToTri<#=typeName#>(this <#=convDict[typeName]#> v0, <#=convDict[typeName]#> v1, <#=convDict[typeName]#> v2) =>
            new Tri<#=typeName#>( v0.ConvertXYZtoXY(), v1.ConvertXYZtoXY(), v2.ConvertXYZtoXY() );

            /*
        public static Tri<#=typeName#> ToTri<#=typeName#>(this Tri<#=convUnity[typeName]#> face) =>
            new Tri<#=typeName#>( face.v0.To<#=typeName#>(), face.v1.To<#=typeName#>(), face.v2.To<#=typeName#>() );
        public static Tri<#=typeName#> ToTri<#=typeName#>(this <#=convUnity[typeName]#> v0, <#=convUnity[typeName]#> v1, <#=convUnity[typeName]#> v2) =>
            new Tri<#=typeName#>( v0.To<#=typeName#>(), v1.To<#=typeName#>(), v2.To<#=typeName#>() );
            */

<# } #>

    }

}