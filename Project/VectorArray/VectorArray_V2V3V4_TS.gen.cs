//----------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes will be lost if the code is regenerated.
// </auto-generated>
//----------------------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;

namespace DoubleEngine
{
    public static partial class VectorArray
    {
    //[MethodImpl(MethodImplOptions.AggressiveInlining)] public static double Vec4D Math.Abs(a.x) + Math.Abs(a.y) + Math.Abs(a.z) + Math.Abs(a.w)
        public static Vec2D[] Scaled(this Vec2D[] vectors, Vec2D scale) => vectors.Select(v => v.MultipliedVect(scale)).ToArray();
        public static Vec2D[] Translated(this Vec2D[] vectors, Vec2D translation) => vectors.Select(v => v.AddedVect(translation)).ToArray();

        public static void ScaleInPlaceBy(this Vec2D[] vectors, Vec2D scale)
        {
            for (int i = 0; i < vectors.Length; ++i)
                vectors[i] = vectors[i].MultipliedVect(scale);
        }
        public static void TranslateInPlaceBy(this Vec2D[] vectors, Vec2D translation)
        {
            for (int i = 0; i < vectors.Length; ++i)
                vectors[i] = vectors[i].AddedVect(translation);
        }

        public static Vec3D[] Scaled(this Vec3D[] vectors, Vec3D scale) => vectors.Select(v => v.MultipliedVect(scale)).ToArray();
        public static Vec3D[] Translated(this Vec3D[] vectors, Vec3D translation) => vectors.Select(v => v.AddedVect(translation)).ToArray();

        public static void ScaleInPlaceBy(this Vec3D[] vectors, Vec3D scale)
        {
            for (int i = 0; i < vectors.Length; ++i)
                vectors[i] = vectors[i].MultipliedVect(scale);
        }
        public static void TranslateInPlaceBy(this Vec3D[] vectors, Vec3D translation)
        {
            for (int i = 0; i < vectors.Length; ++i)
                vectors[i] = vectors[i].AddedVect(translation);
        }

        public static Vec4D[] Scaled(this Vec4D[] vectors, Vec4D scale) => vectors.Select(v => v.MultipliedVect(scale)).ToArray();
        public static Vec4D[] Translated(this Vec4D[] vectors, Vec4D translation) => vectors.Select(v => v.AddedVect(translation)).ToArray();

        public static void ScaleInPlaceBy(this Vec4D[] vectors, Vec4D scale)
        {
            for (int i = 0; i < vectors.Length; ++i)
                vectors[i] = vectors[i].MultipliedVect(scale);
        }
        public static void TranslateInPlaceBy(this Vec4D[] vectors, Vec4D translation)
        {
            for (int i = 0; i < vectors.Length; ++i)
                vectors[i] = vectors[i].AddedVect(translation);
        }

    }
}
