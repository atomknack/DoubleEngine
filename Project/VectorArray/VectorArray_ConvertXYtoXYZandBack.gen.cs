//----------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes will be lost if the code is regenerated.
// </auto-generated>
//----------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;

namespace DoubleEngine
{
    public static partial class VectorArray
    {
        public static Vec2D[] ConvertXYZtoXYArray(this Vec3D[] vectors)
        {
            Vec2D[] newArray = new Vec2D[vectors.Length];
            for (int i = 0; i < vectors.Length; ++i)
                newArray[i] = new Vec2D(vectors[i].x, vectors[i].y);
            return newArray;
        }
        public static Vec3D[] ConvertXYtoXYZArray(this Vec2D[] vectors, double newZ)
        {
            Vec3D[] newArray = new Vec3D[vectors.Length];
            for (int i = 0; i < vectors.Length; ++i)
                newArray[i] = new Vec3D(vectors[i].x, vectors[i].y, newZ);
            return newArray;
        }
        public static Vec2D[] ConvertXYZtoXYArray(this ReadOnlySpan<Vec3D> vectors)
        {
            Vec2D[] newArray = new Vec2D[vectors.Length];
            for (int i = 0; i < vectors.Length; ++i)
                newArray[i] = new Vec2D(vectors[i].x, vectors[i].y);
            return newArray;
        }
        public static Vec3D[] ConvertXYtoXYZArray(this ReadOnlySpan<Vec2D> vectors, double newZ)
        {
            Vec3D[] newArray = new Vec3D[vectors.Length];
            for (int i = 0; i < vectors.Length; ++i)
                newArray[i] = new Vec3D(vectors[i].x, vectors[i].y, newZ);
            return newArray;
        }
        public static Vec2D[] ConvertXYZtoXYArray(this IReadOnlyList<Vec3D> vectors)
        {
            Vec2D[] newArray = new Vec2D[vectors.Count];
            for (int i = 0; i < vectors.Count; ++i)
                newArray[i] = new Vec2D(vectors[i].x, vectors[i].y);
            return newArray;
        }
        public static Vec3D[] ConvertXYtoXYZArray(this IReadOnlyList<Vec2D> vectors, double newZ)
        {
            Vec3D[] newArray = new Vec3D[vectors.Count];
            for (int i = 0; i < vectors.Count; ++i)
                newArray[i] = new Vec3D(vectors[i].x, vectors[i].y, newZ);
            return newArray;
        }

/*        public static Vec3D[] ConvertXYtoXYZArrayVec3D(this Vec2D[] vectors, double newZ)
        {
            Vec3D[] newArray = new Vec3D[vectors.Length];
            for (int i = 0; i < vectors.Length; ++i)
                newArray[i] = new Vec3D(vectors[i].x, vectors[i].y, newZ);
            return newArray;
        }
        public static Vec3D[] ConvertXYtoXYZArrayVec3D(this ReadOnlySpan<Vec2D> vectors, double newZ)
        {
            Vec3D[] newArray = new Vec3D[vectors.Length];
            for (int i = 0; i < vectors.Length; ++i)
                newArray[i] = new Vec3D(vectors[i].x, vectors[i].y, newZ);
            return newArray;
        }
        public static Vec3D[] ConvertXYtoXYZArrayVec3D(this IReadOnlyList<Vec2D> vectors, double newZ)
        {
            Vec3D[] newArray = new Vec3D[vectors.Count];
            for (int i = 0; i < vectors.Count; ++i)
                newArray[i] = new Vec3D(vectors[i].x, vectors[i].y, newZ);
            return newArray;
        }*/

        public static Vec2I[] ConvertXYZtoXYArray(this Vec3I[] vectors)
        {
            Vec2I[] newArray = new Vec2I[vectors.Length];
            for (int i = 0; i < vectors.Length; ++i)
                newArray[i] = new Vec2I(vectors[i].x, vectors[i].y);
            return newArray;
        }
        public static Vec3I[] ConvertXYtoXYZArray(this Vec2I[] vectors, int newZ)
        {
            Vec3I[] newArray = new Vec3I[vectors.Length];
            for (int i = 0; i < vectors.Length; ++i)
                newArray[i] = new Vec3I(vectors[i].x, vectors[i].y, newZ);
            return newArray;
        }
        public static Vec2I[] ConvertXYZtoXYArray(this ReadOnlySpan<Vec3I> vectors)
        {
            Vec2I[] newArray = new Vec2I[vectors.Length];
            for (int i = 0; i < vectors.Length; ++i)
                newArray[i] = new Vec2I(vectors[i].x, vectors[i].y);
            return newArray;
        }
        public static Vec3I[] ConvertXYtoXYZArray(this ReadOnlySpan<Vec2I> vectors, int newZ)
        {
            Vec3I[] newArray = new Vec3I[vectors.Length];
            for (int i = 0; i < vectors.Length; ++i)
                newArray[i] = new Vec3I(vectors[i].x, vectors[i].y, newZ);
            return newArray;
        }
        public static Vec2I[] ConvertXYZtoXYArray(this IReadOnlyList<Vec3I> vectors)
        {
            Vec2I[] newArray = new Vec2I[vectors.Count];
            for (int i = 0; i < vectors.Count; ++i)
                newArray[i] = new Vec2I(vectors[i].x, vectors[i].y);
            return newArray;
        }
        public static Vec3I[] ConvertXYtoXYZArray(this IReadOnlyList<Vec2I> vectors, int newZ)
        {
            Vec3I[] newArray = new Vec3I[vectors.Count];
            for (int i = 0; i < vectors.Count; ++i)
                newArray[i] = new Vec3I(vectors[i].x, vectors[i].y, newZ);
            return newArray;
        }

/*        public static Vec3I[] ConvertXYtoXYZArrayVec3I(this Vec2I[] vectors, int newZ)
        {
            Vec3I[] newArray = new Vec3I[vectors.Length];
            for (int i = 0; i < vectors.Length; ++i)
                newArray[i] = new Vec3I(vectors[i].x, vectors[i].y, newZ);
            return newArray;
        }
        public static Vec3I[] ConvertXYtoXYZArrayVec3I(this ReadOnlySpan<Vec2I> vectors, int newZ)
        {
            Vec3I[] newArray = new Vec3I[vectors.Length];
            for (int i = 0; i < vectors.Length; ++i)
                newArray[i] = new Vec3I(vectors[i].x, vectors[i].y, newZ);
            return newArray;
        }
        public static Vec3I[] ConvertXYtoXYZArrayVec3I(this IReadOnlyList<Vec2I> vectors, int newZ)
        {
            Vec3I[] newArray = new Vec3I[vectors.Count];
            for (int i = 0; i < vectors.Count; ++i)
                newArray[i] = new Vec3I(vectors[i].x, vectors[i].y, newZ);
            return newArray;
        }*/

    }
}
