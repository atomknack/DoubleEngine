<#@ template language="C#" #>
<#@ output extension=".gen.cs" #>
//----------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes will be lost if the code is regenerated.
// </auto-generated>
//----------------------------------------------------------------------------------------
<#@ include file="$(ProjectDir)\_Include\_0_AssemplyImports.ttinclude" #>
<#@ include file="$(ProjectDir)\_Include\_2_GlobalTTInclude.ttinclude" #>
<#@ include file="$(ProjectDir)\_Include\_4_typeDeclaration.ttinclude" #>

<#@ include file="$(ProjectDir)\_Include\_6_Vec3D_typeInitialization.ttinclude" #>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace DoubleEngine
{
    public static partial class VectorArray
    {
    //<#=aInline#> <#=publicStatic#> <#=b.type#> <#=typeName#> <#=String.Join(" + ",fieldNames.Select(x=> $"{math["Abs"]}(a.{x})"))#>

    /*
        public static Vector3[] Rotated(this Vector3[] vectors, Quaternion rotation) => 
            vectors.Select(v => v.Rotated(rotation)).ToArray();
        public static void RotateNormalsInPlace(this Vector3[] normals, Quaternion rotation) => 
            normals.RotateInPlaceBy(rotation);
        public static void RotateInPlaceBy(this Vector3[] vectors, Quaternion rotation)
        {
            for (int i = 0; i < vectors.Length; ++i)
                vectors[i] = vectors[i].Rotated(rotation);
        }
        */
<# 

Dictionary<string,string> quatDict = new Dictionary<string,string>();
quatDict["Vec3D"] = "QuaternionD";
quatDict["Vector3"] = "Quaternion";

for(var a = 0; a<availableTypes.Count; a++)
    {
    UnfoldTypeDescription(availableTypes[a]);
#>

// need testing
        public static <#=typeName#>[] Rotated(this <#=typeName#>[] vectors, <#=quatDict[typeName]#> rotation) => 
            rotation.Rotate(vectors);
// need testing
        public static void RotateNormalsInPlace(this <#=typeName#>[] normals, <#=quatDict[typeName]#> rotation) => 
            rotation.RotateInPlace(normals);
// need testing
        public static void RotateInPlaceBy(this <#=typeName#>[] vectors, <#=quatDict[typeName]#> rotation) =>
            rotation.RotateInPlace(vectors);

<# } #>
    }
}
