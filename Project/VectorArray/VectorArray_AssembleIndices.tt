<#@ template language="C#" #>
<#@ output extension=".gen.cs" #>
//----------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes will be lost if the code is regenerated.
// </auto-generated>
//----------------------------------------------------------------------------------------
<#@ include file="$(ProjectDir)\_Include\_0_AssemplyImports.ttinclude" #>
<#@ include file="$(ProjectDir)\_Include\_2_GlobalTTInclude.ttinclude" #>
<#@ include file="$(ProjectDir)\_Include\_4_collectionIterator.ttinclude" #>
<#@ include file="$(ProjectDir)\_Include\_4_typeDeclaration.ttinclude" #>

<#@ include file="$(ProjectDir)\_Include\_6_Generic_T_typeInitialization.ttinclude" #>
<#@ include file="$(ProjectDir)\_Include\_6_Vec2D_typeInitialization.ttinclude" #>
<#@ include file="$(ProjectDir)\_Include\_6_Vec3D_typeInitialization.ttinclude" #>
<#@ include file="$(ProjectDir)\_Include\_6_Vec4D_typeInitialization.ttinclude" #>
using System;
using System.Collections.Generic;
using Collections.Pooled;

namespace <#=globalNamespaceName#>;

public static partial class VectorUtil
{
<# 
var reciverMetatypes = new Func<string, string>[2];
reciverMetatypes[0] = x=>$"IList<{x}>";
reciverMetatypes[1] = x=>$"PooledList<{x}>";

for(var a = 0; a<availableTypes.Count; a++)
    {
    UnfoldTypeDescription(availableTypes[a]);

    Func<string, string> Generic = x=>x=="T"?"<T>":"";
#>
    // update tested in Enumerables.AssembleIndices_Tests // [Obsolete("Not tested, need testing")]
    public static <#=typeName#>[] AssembleIndices<#=Generic(typeName)#>(this <#=typeName#>[] vertices, int[] indicesToAssemble)
    {
        <#=typeName#>[] result = new <#=typeName#>[indicesToAssemble.Length];
        for (var i = 0; i < indicesToAssemble.Length; i++)
            result[i] = vertices[indicesToAssemble[i]];
        return result;
    }
    public static <#=typeName#>[] AssembleIndices<#=Generic(typeName)#>(this ReadOnlySpan<<#=typeName#>> vertices, int[] indicesToAssemble)
    {
        <#=typeName#>[] result = new <#=typeName#>[indicesToAssemble.Length];
        for (var i = 0; i < indicesToAssemble.Length; i++)
            result[i] = vertices[indicesToAssemble[i]];
        return result;
    }
// generated
<#  foreach(var verticesIterator in new[]{ CollectionIterator.readOnlySpan, CollectionIterator.iReadOnlyList }) {#>
<#  foreach(var indicesIterator in new[]{ CollectionIterator.readOnlySpan, CollectionIterator.iReadOnlyList }) {#>
    public static <#=typeName#>[] AssembleIndices<#=Generic(typeName)#>(this <#=verticesIterator.name(typeName)#> vertices, <#=indicesIterator.name("int")#> indicesToAssemble)
    {
        <#=typeName#>[] result = new <#=typeName#>[indicesToAssemble.<#=indicesIterator.length#>];
        for (var i = 0; i < indicesToAssemble.<#=indicesIterator.length#>; i++)
            result[i] = vertices[indicesToAssemble[i]];
        return result;
    }
    public static void AssembleIndicesToBuffer<#=Generic(typeName)#>(this <#=verticesIterator.name(typeName)#> vertices, <#=indicesIterator.name("int")#> indicesToAssemble, Span<<#=typeName#>> buffer)
    {
        for (var i = 0; i < indicesToAssemble.<#=indicesIterator.length#>; i++)
            buffer[i] = vertices[indicesToAssemble[i]];
    }
<#  } //end of foreach(var indicesIterator  #>
<#  } //end of foreach(var verticesIterator  #>
<#  foreach(var receiverType in reciverMetatypes) { #>
    public static void AppendAssembledIndices<#=Generic(typeName)#>(this <#=receiverType(typeName)#> receiver, ReadOnlySpan<<#=typeName#>> vertices, ReadOnlySpan<int> indicesToAssemble)
    {
        for (var i = 0; i < indicesToAssemble.Length; i++)
            receiver.Add( vertices[indicesToAssemble[i]] );
    }
    public static void AppendAssembledIndices<#=Generic(typeName)#>(this <#=receiverType(typeName)#> receiver, IList<<#=typeName#>> vertices, ReadOnlySpan<int> indicesToAssemble)
    {
        for (var i = 0; i < indicesToAssemble.Length; i++)
            receiver.Add( vertices[indicesToAssemble[i]] );
    }
    public static void AppendAssembledIndices<#=Generic(typeName)#>(this <#=receiverType(typeName)#> receiver, ReadOnlySpan<<#=typeName#>> vertices, IReadOnlyList<int> indicesToAssemble)
    {
        int Length = indicesToAssemble.Count;
        for (var i = 0; i < Length; i++)
            receiver.Add( vertices[indicesToAssemble[i]] );
    }
    public static void AppendAssembledIndices<#=Generic(typeName)#>(this <#=receiverType(typeName)#> receiver, IReadOnlyList<<#=typeName#>> vertices, IReadOnlyList<int> indicesToAssemble)
    {
        int Length = indicesToAssemble.Count;
        for (var i = 0; i < Length; i++)
            receiver.Add( vertices[indicesToAssemble[i]] );
    }
<#  } //end of foreach(var receiverType in reciverMetatypes)  #>
<# } #>
}
