<#@ template language="C#" #>
<#@ output extension=".gen.cs" #>
//----------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes will be lost if the code is regenerated.
// </auto-generated>
//----------------------------------------------------------------------------------------
<#@ include file="$(ProjectDir)\_Include\_0_AssemplyImports.ttinclude" #>
<#@ include file="$(ProjectDir)\_Include\_2_GlobalTTInclude.ttinclude" #>
<#@ include file="$(ProjectDir)\_Include\_4_typeDeclaration.ttinclude" #>

<#@ include file="$(ProjectDir)\_Include\_6_Vec2D_typeInitialization.ttinclude" #>
<#@ include file="$(ProjectDir)\_Include\_6_Vec3D_typeInitialization.ttinclude" #>
<#@ include file="$(ProjectDir)\_Include\_6_Vec4D_typeInitialization.ttinclude" #>

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;

namespace <#=globalNamespaceName#>
{
    public static partial class VectorArray
    {
    //<#=aInline#> <#=publicStatic#> <#=b.type#> <#=typeName#> <#=String.Join(" + ",fieldNames.Select(x=> $"{math["Abs"]}(a.{x})"))#>
<# 

for(var a = 0; a<availableTypes.Count; a++)
    {
    UnfoldTypeDescription(availableTypes[a]);
#>
        public static <#=typeName#>[] Scaled(this <#=typeName#>[] vectors, <#=typeName#> scale) => vectors.Select(v => v.MultipliedVect(scale)).ToArray();
        public static <#=typeName#>[] Translated(this <#=typeName#>[] vectors, <#=typeName#> translation) => vectors.Select(v => v.AddedVect(translation)).ToArray();

        public static void ScaleInPlaceBy(this <#=typeName#>[] vectors, <#=typeName#> scale)
        {
            for (int i = 0; i < vectors.Length; ++i)
                vectors[i] = vectors[i].MultipliedVect(scale);
        }
        public static void TranslateInPlaceBy(this <#=typeName#>[] vectors, <#=typeName#> translation)
        {
            for (int i = 0; i < vectors.Length; ++i)
                vectors[i] = vectors[i].AddedVect(translation);
        }

<# } #>
    }
}
