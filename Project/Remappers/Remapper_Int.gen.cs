//----------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes will be lost if the code is regenerated.
// </auto-generated>
//----------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Text;

namespace DoubleEngine
{
    public partial class RemapperInt
    {
        private Dictionary<int, int> remap;
        private int count;

        public Dictionary<int,int>.KeyCollection GetItemsToRemap() => remap.Keys;
        public int GetCount() => count;
        public int GetRemappedForExisting(int itemToRemap) => remap[itemToRemap];
        
        public int GetRemappedOrAdd(int itemToRemap)
        {
            if (remap.TryGetValue(itemToRemap, out int result))
                return result;
            AddWithoutChecks(itemToRemap);
            return GetRemappedForExisting(itemToRemap);
        }
        
        public void Add(int itemToRemap)
        {
            if (remap.ContainsKey(itemToRemap))
                return;
            AddWithoutChecks(itemToRemap);
        }
        
#region // Add and Remap in bulk for array, span and list
        public void AddMany(int[] itemsToAdd)
        {
            for(int i = 0; i < itemsToAdd.Length; i++)
                Add(itemsToAdd[i]);
        }
        public int[] RemapExistingItems(int[] itemsToRemap)
        {
            int[] result = new int[itemsToRemap.Length];
            for(int i = 0; i < itemsToRemap.Length; i++)
                result[i] = GetRemappedForExisting(itemsToRemap[i]);
            return result;
        }
        public void AddMany(Span<int> itemsToAdd)
        {
            for(int i = 0; i < itemsToAdd.Length; i++)
                Add(itemsToAdd[i]);
        }
        public int[] RemapExistingItems(Span<int> itemsToRemap)
        {
            int[] result = new int[itemsToRemap.Length];
            for(int i = 0; i < itemsToRemap.Length; i++)
                result[i] = GetRemappedForExisting(itemsToRemap[i]);
            return result;
        }
        public void AddMany(List<int> itemsToAdd)
        {
            for(int i = 0; i < itemsToAdd.Count; i++)
                Add(itemsToAdd[i]);
        }
        public int[] RemapExistingItems(List<int> itemsToRemap)
        {
            int[] result = new int[itemsToRemap.Count];
            for(int i = 0; i < itemsToRemap.Count; i++)
                result[i] = GetRemappedForExisting(itemsToRemap[i]);
            return result;
        }
#endregion
#region // Constructors and Clearing
        public RemapperInt(int initialRemapperInternalDictionaryCapacity)
        {
            remap = new Dictionary<int, int>(initialRemapperInternalDictionaryCapacity);
            count = 0;
        }
        public RemapperInt()
        {
            remap = new Dictionary<int, int>();
            count = 0;
        }
        public void Clear_ToUseWithRelativerySameNumberOfItems()
        {
            remap.Clear();
            count = 0;
        }
#endregion
        private void AddWithoutChecks(int itemToRemap)
        {
            remap.Add(itemToRemap, count);
            count++;
        }

    }
}
