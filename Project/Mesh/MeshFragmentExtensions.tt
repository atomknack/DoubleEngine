<#@ template language="C#" hostspecific="True"#>
<#@ output extension=".gen.cs" #>
<#@ include file="$(ProjectDir)\_Include\_0_AssemplyImports.ttinclude" #>

<#@ import namespace="System.IO" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>

<#@ include file="$(ProjectDir)\_Include\_1_ManagerMultipleOutputHelper.ttinclude"#>
<#@ include file="$(ProjectDir)\_Include\_2_GlobalTTInclude.ttinclude" #>
<#@ include file="$(ProjectDir)\_Include\_4_typeDeclaration.ttinclude" #>

<#@ include file="$(ProjectDir)\_Include\_6_Vec3D_typeInitialization.ttinclude" #>
<# FileInfo t4FileInfo = new FileInfo( this.Host.TemplateFile );#>
//----------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a <#=t4FileInfo.Name#>
//     Changes will be lost if the code is regenerated.
// </auto-generated>
//----------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Text;

namespace DoubleEngine
{
    public static class MeshFragmentExtensions
    {
<# var manager = Manager.Create(Host, GenerationEnvironment); #>
<# 

for(var k = 0; k<availableTypes.Count; k++)
    {
    UnfoldTypeDescription(availableTypes[k]);
#>
/*
        [Obsolete("Replace all non critical places with interface version")]
        public static IEnumerable<Tri<#=typeName#>> Tris(this MeshFragment<#=typeName#> m) //need testing
        {
        for (int i=0; i<m.triangles.Length; i+=3)
            yield return new Tri<#=typeName#>(m.vertices[m.triangles[i]], m.vertices[m.triangles[i+1]], m.vertices[m.triangles[i+2]]);
        }
*/
        //[Obsolete("Not tested")]
        public static Tri<#=typeName#>[] Tris(this IMeshFragment<<#=typeName#>> mesh) //need testing
        {
            ReadOnlySpan<IndexedTri> faces = mesh.Faces;
            ReadOnlySpan<<#=typeName#>> vertices = mesh.Vertices;
            Tri<#=typeName#>[] result = new Tri<#=typeName#>[faces.Length];
            for (int i=0; i<faces.Length; ++i)
            {
                result[i] = new Tri<#=typeName#>(vertices[faces[i].v0], vertices[faces[i].v1], vertices[faces[i].v2]);
            }
            return result;
        }
        /*
        [Obsolete("Replace all non critical places with interface version")]
        public static bool ContainsEqualishTriangle(this MeshFragment<#=typeName#> mesh, Tri<#=typeName#> tri, double epsilon = 0.000001d)
        {
            int[] tris = mesh.triangles;
            for (int i = 0; i < tris.Length; i += 3)
            {
                Tri<#=typeName#> meshTri = new Tri<#=typeName#>(mesh.vertices[tris[i]], mesh.vertices[tris[i + 1]], mesh.vertices[tris[i + 2]]);
                if (tri.VerticesEqual_Manhattan(meshTri, epsilon))
                    return true;
                if (tri.VerticesEqual_Manhattan(meshTri.ShiftOnce(), epsilon))
                    return true;
                if (tri.VerticesEqual_Manhattan(meshTri.ShiftTwice(), epsilon))
                    return true;
            }
            return false;
        }*/
        public static bool ContainsEqualishTriangle(this IMeshFragment<<#=typeName#>> mesh, Tri<#=typeName#> tri, double epsilon = 0.000001d)
        {
            ReadOnlySpan<int> tris = mesh.Triangles;
            ReadOnlySpan<<#=typeName#>> vertices = mesh.Vertices;
            for (int i = 0; i < tris.Length; i += 3)
            {
                Tri<#=typeName#> meshTri = new Tri<#=typeName#>(vertices[tris[i]], vertices[tris[i + 1]], vertices[tris[i + 2]]);
                if (tri.VerticesEqual_Manhattan(meshTri, epsilon))
                    return true;
                if (tri.VerticesEqual_Manhattan(meshTri.ShiftOnce(), epsilon))
                    return true;
                if (tri.VerticesEqual_Manhattan(meshTri.ShiftTwice(), epsilon))
                    return true;
            }
            return false;
        }
<#  } #>
    }
}
